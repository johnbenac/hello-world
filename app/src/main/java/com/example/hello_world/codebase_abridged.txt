

```codebase summary
                     


                     ```AndroidMediaPlaybackManager.kt
class AndroidMediaPlaybackManager()
fun seekForward()
fun seekBackward()
fun pause()
fun isPlaying()
fun playAudio()
fun start()
fun pause()
fun getDuration()
fun getCurrentPosition()
fun getBufferPercentage()
fun isPlaying()
fun seekTo()
fun canPause()
fun getAudioSessionId()
fun canSeekBackward()
fun canSeekForward()
```

```AndroidTextToSpeechService.kt
class AndroidTextToSpeechService()
fun onInit()
fun renderSpeech()
fun onStart()
fun onDone()
fun onError()
fun getAudioFilePath()
fun stop()
fun shutdown()
```

```Conversation.kt
class Conversation()
```

```ConversationManager.kt
class ConversationManager(var conversation: Conversation)
fun addMessage()
fun updateMessage()
fun deleteMessage()
```

```ConversationMessage.kt
class ConversationMessage(
    val sender: String,
    val message: String,
    val audioFilePath: MutableState<String>
)
```

```ConversationsManager.kt
class ConversationsManager(private val conversationRepository: IConversationRepository)
fun saveConversation()
fun loadConversation()
fun deleteConversation()
fun loadAllConversations()
```

```EditSettingsScreen.kt
fun EditSettingsScreen()
```

```ElevenLabsTextToSpeechService.kt
class ElevenLabsTextToSpeechService()
fun renderSpeech()
fun onFailure()
fun onResponse()
fun getAudioFilePath()
fun createTtsRequestBody()
fun buildTtsRequest()
fun handleTtsResponse()
fun stop()
fun shutdown()
```

```IConversationRepository.kt
interface IConversationRepository()
fun saveConversation()
fun loadConversation()
fun deleteConversation()
fun loadAllConversations()
```

```LocalConversationDao.kt
interface LocalConversationDao()
fun insertConversation()
fun insertMessage()
fun getConversation()
fun getMessages()
fun saveConversation()
fun getAllConversations()
fun deleteConversation()
fun deleteMessages()
```

```LocalConversationDatabase.kt
class LocalConversationDatabase()
fun conversationDao()
fun getInstance()
```

```LocalConversationEntity.kt
class LocalConversationEntity(
    @PrimaryKey
    val id: String,
    val profileJson: String,
    val createdAt: Long,
    val title: String?,
    val dateStarted: Long,
    val dateLastSaved: Long,
    val messageCount: Int
)
```

```LocalConversationMessageEntity.kt
class LocalConversationMessageEntity()
```

```LocalRoomConversationRepository.kt
class LocalRoomConversationRepository(context: Context)
fun saveConversation()
fun loadConversation()
fun deleteConversation()
fun loadAllConversations()
```

```MainActivity.kt
class MainActivity()
class onCreate()
class onResume()
class onPause()
class onDestroy()
class onRequestPermissionsResult()
fun onCreate()
fun requestAudioPermission()
fun onResume()
fun onPause()
fun onDestroy()
fun onRequestPermissionsResult()
fun shareConversationText()
```

```MainScreen.kt
fun MainScreen()
```

```MainViewModel.kt
class MainViewModel(
    var textToSpeechServiceState: MutableState<TextToSpeechService>?,

    private val context: Context,
    private val settingsViewModel: SettingsViewModel,
    private val openAiApiService: OpenAiApiService,
    private val conversationRepository: IConversationRepository
)
fun loadInitialConversation()
fun saveCurrentConversation()
fun startListening()
fun sendUserMessageToOpenAi()
fun updateMessage()
fun deleteMessage()
fun startPeriodicListeningCheck()
fun stopListening()
fun onTriggerWordDetected()
fun loadConversation()
fun saveConversation()
fun onSaveDialogConfirmed()
fun onSaveDialogDismissed()
```

```MediaControls.kt
fun MediaControls()
```

```MediaPlaybackManager.kt
interface MediaPlaybackManager()
fun playAudio()
fun isPlaying()
fun pause()
fun seekForward()
fun seekBackward()
```

```MessageCard.kt
fun MessageCard()
```

```OpenAiApiResponse.kt
class OpenAiApiResponse(val choices: List<OpenAiApiChoice>)
class OpenAiApiChoice(val message: OpenAiApiMessage)
class OpenAiApiMessage(val role: String, val content: String)
```

```OpenAiApiService.kt
class OpenAiMessage(val role: String, val content: String)
class OpenAiApiRequest(
    val messages: List<OpenAiMessage>,
    val temperature: Double,
    val max_tokens: Int,
    val top_p: Int,
    val frequency_penalty: Double,
    val presence_penalty: Double,
    val model: String,
    val stream: Boolean
)
class OpenAiApiService(private val apiKey: String, private val settingsViewModel: SettingsViewModel, private val timeoutInSeconds: Long = 600)
fun sendMessage()
fun onFailure()
fun onResponse()
```

```Profile.kt
class Profile(
    val name: String,
    val systemMessage: String,
    val maxLength: Int,
    val temperature: Double,
    val frequencyPenalty: Double,
    val presencePenalty: Double,
    val model: String
)
```

```SavedConversationsScreen.kt
fun SavedConversationsScreen()
fun CardElevation()
fun ConversationCard()
fun formatDate()
```

```SavedConversationsViewModel.kt
class SavedConversationsViewModel(
    private val conversationRepository: IConversationRepository
)
fun loadSavedConversations()
fun deleteConversation()
```

```SettingsScreen.kt
fun SettingsScreen()
fun CurrentSettings()
```

```SettingsViewModel.kt
class SettingsViewModel()
fun updateEditedProfileName()
fun saveEditedProfile()
fun updateEditedProfileSystemMessage()
fun updateEditedProfileMaxLength()
fun updateEditedProfileTemperature()
fun updateEditedProfileFrequencyPenalty()
fun updateEditedProfilePresencePenalty()
fun updateEditedProfileModel()
fun saveCustomProfile()
fun deleteProfile()
fun applyProfile()
```

```TextToSpeechService.kt
interface TextToSpeechService()
fun renderSpeech()
fun stop()
fun getAudioFilePath()
fun shutdown()
```

```VoiceTriggerDetector.kt
class VoiceTriggerDetector()
fun startListening()
fun stopListening()
fun onReadyForSpeech()
fun onBeginningOfSpeech()
fun onRmsChanged()
fun onBufferReceived()
fun onEndOfSpeech()
fun onError()
fun onResults()
fun onPartialResults()
fun onEvent()
fun processResults()
```

```Color.kt

```

```Theme.kt
fun HelloworldTheme()
```

```Type.kt

```


    


    ```end of codebase summary

    