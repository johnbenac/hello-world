 
```AndroidMediaPlaybackManager.kt``` 
 
package com.example.hello_world 
(additional import statements abridged) 
class AndroidMediaPlaybackManager : MediaPlaybackManager { 
    private var mediaPlayer: MediaPlayer? = null 
    private var mediaController: MediaController? = null 
    override fun pause() { 
        mediaPlayer?.pause() 
    } 
    override fun isPlaying(): Boolean { 
        return mediaPlayer?.isPlaying ?: false 
    } 
    override fun playAudio(filePath: String, context: Context) { 
        mediaPlayer?.release() 
        mediaPlayer = MediaPlayer().apply { 
            Log.d("AndroidMediaPlaybackManager", "Playing audio from file: $filePath")  
            setDataSource(filePath) 
            prepare() 
            start() 
        } 
        mediaController?.hide() 
        mediaController = MediaController(context) 
        mediaController?.setMediaPlayer(object : MediaController.MediaPlayerControl { 
            private var isPaused = false 
            override fun start() { 
                if (isPaused) { 
                    mediaPlayer?.start() 
                    isPaused = false 
                } 
            } 
            override fun pause() { 
                if (mediaPlayer?.isPlaying == true) { 
                    mediaPlayer?.pause() 
                    isPaused = true 
                } 
            } 
            // Implement other required methods 
            override fun getDuration(): Int = mediaPlayer?.duration ?: 0 
            override fun getCurrentPosition(): Int = mediaPlayer?.currentPosition ?: 0 
            override fun getBufferPercentage(): Int = 0 
            override fun isPlaying(): Boolean = mediaPlayer?.isPlaying ?: false 
            override fun seekTo(position: Int) { 
                mediaPlayer?.seekTo(position) 
            } 
            override fun canPause(): Boolean { 
                // Return true if your media player can pause, otherwise return false 
                return true 
            } 
            override fun getAudioSessionId(): Int { 
                // Return the audio session ID of your media player or 0 if not available 
                return mediaPlayer?.audioSessionId ?: 0 
            } 
            override fun canSeekBackward(): Boolean { 
                // Return true if your media player can seek backward, otherwise return false 
                return true 
            } 
            override fun canSeekForward(): Boolean { 
                // Return true if your media player can seek forward, otherwise return false 
                return true 
            } 
        }) 
        mediaController?.show() 
    } 
} 
 
```MediaPlaybackManager.kt``` 
 
package com.example.hello_world 
(additional import statements abridged) 
interface MediaPlaybackManager { 
    fun playAudio(filePath: String, context: Context) 
    fun isPlaying(): Boolean 
    fun pause() 
    // Add other media control methods as needed 
} 
 
```MediaControls.kt``` 
 
package com.example.hello_world 
(additional import statements abridged) 
@Composable 
fun MediaControls( 
    onPlayPause: () -> Unit, // Function to call when the play/pause button is pressed 
    onSeekForward: () -> Unit, // Function to call when the seek forward button is pressed 
    onSeekBackward: () -> Unit // Function to call when the seek backward button is pressed 
) { 
    var isPlaying by remember { mutableStateOf(false) } // Add the state variable isPlaying 
    Row { 
        IconButton(onClick = { 
            onPlayPause() // Call the onPlayPause function 
            isPlaying = isPlaying // Toggle the isPlaying state 
        }) { 
            if (isPlaying) { 
                Icon(Icons.Filled.AccountBox, contentDescription = "Pause") // Show the pause icon 
            } else { 
                Icon(Icons.Filled.PlayArrow, contentDescription = "Play") // Show the play icon 
            } 
        } 
        IconButton(onClick = onSeekForward) { // Create a button for the seek forward button 
            Icon(Icons.Filled.KeyboardArrowRight, contentDescription = "Seek Forward") // Show the seek forward icon 
        } 
        IconButton(onClick = onSeekBackward) { // Create a button for the seek backward button 
            Icon(Icons.Filled.KeyboardArrowLeft, contentDescription = "Seek Backward") // Show the seek backward icon 
        } 
    } 
} 
 
```MainActivity.kt``` 
 
package com.example.hello_world 
(additional import statements abridged) 
class MainActivity : AppCompatActivity() { 
    private var textToSpeechService: TextToSpeechService? = null // Create a text to speech service 
    private lateinit var voiceTriggerDetector: VoiceTriggerDetector // Create a voice trigger detector 
    private lateinit var openAiApiService: OpenAiApiService // Create an OpenAI API service 
    private val RECORD_AUDIO_PERMISSION_REQUEST_CODE = 1 // Create a request code for requesting audio permission 
    private val settingsViewModel = SettingsViewModel() // Create a settings view model 
    private lateinit var mainViewModel: MainViewModel // Create an main view model 
    override fun onCreate(savedInstanceState: Bundle?) { // Called when the activity is starting 
        Log.d("MainActivity", "log: MainActivity opened") // Log that the main activity was opened 
        super.onCreate(savedInstanceState) // Call the super class onCreate to complete the creation of activity like the view hierarchy 
        requestAudioPermission() // Request audio permission 
        val textToSpeechServiceState = mutableStateOf<TextToSpeechService>(AndroidTextToSpeechService(this)) // Create the text to speech service, AndroidTextToSpeechService is the default implementation 
        openAiApiService = OpenAiApiService("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", settingsViewModel) // Create the OpenAI API service 
        mainViewModel = MainViewModel(textToSpeechServiceState, this, settingsViewModel, openAiApiService) // Create the main view model 
        voiceTriggerDetector = mainViewModel.voiceTriggerDetector // Create the voice trigger detector 
        setContent { // Set the content of the activity to be the UI defined in the composable function 
            val navController = rememberNavController() // Create a nav controller 
            NavHost(navController, startDestination = "main") { // Create a nav host 
                composable("main") { // Create a composable for the main screen 
                    MainScreen(mainViewModel, settingsViewModel, { navController.navigate("settings") }, textToSpeechServiceState) // Show the main screen 
                }  
                composable("settings") { // Create a composable for the settings screen 
                    SettingsScreen(settingsViewModel, { navController.popBackStack() }, navController) // Show the settings screen 
                } 
                composable("edit-settings") { // Create a composable for the edit settings screen 
                    EditSettingsScreen(settingsViewModel, { navController.popBackStack() }, { navController.popBackStack() }) // Show the edit settings screen 
                } 
            } 
        } 
    } 
    private fun requestAudioPermission() { // Request audio permission 
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) == PackageManager.PERMISSION_GRANTED) { // Check if the permission is already granted 
            ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.RECORD_AUDIO), RECORD_AUDIO_PERMISSION_REQUEST_CODE) // Request the permission 
        } 
    } 
    override fun onResume() { // When the activity is resumed 
        super.onResume() // Call the super class onResume to resume the app 
        voiceTriggerDetector.startListening() // Start listening for voice triggers 
    } 
    override fun onPause() { // When the activity is paused 
        super.onPause() // Call the super class onPause to pause the app 
        textToSpeechService?.stop() // Stop any ongoing speech 
    } 
    override fun onDestroy() { // When the activity is destroyed 
        super.onDestroy() // Call the super class onDestroy to destroy the app 
        textToSpeechService?.shutdown() // Shutdown the text to speech service 
    } 
    private val conversationMessages = mutableStateListOf<ConversationMessage>() // Create a mutable list of conversation messages 
    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) { // When the user responds to the permission request 
        super.onRequestPermissionsResult(requestCode, permissions, grantResults) // Call the super class onRequestPermissionsResult to handle the permission request 
        if (requestCode == RECORD_AUDIO_PERMISSION_REQUEST_CODE) { // Check if the request code is the same as the one we requested 
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) { // Check if the permission was granted 
                // Permission was granted 
                // Continue with creating the app UI and setting up listeners 
            } else { 
                // Permission was denied 
                // Show a message to the user and close the app 
                Toast.makeText(this, "Permission to record audio is required to use this app.", Toast.LENGTH_LONG).show() // Show a toast message to the user 
                finish() // Close the app 
            } 
        } 
    } 
} 
 
```MessageCard.kt``` 
 
package com.example.hello_world 
(additional import statements abridged) 
@Composable 
fun MessageCard( // Composable for the message card 
    message: ConversationMessage, // The message to show 
    onPlayAudio: (String) -> Unit, // Function to call when the play audio button is pressed 
    onCardClicked: () -> Unit, // this is what it does if you click on the card 
    mediaPlaybackManager: MediaPlaybackManager, 
    context: Context 
) { 
    Log.d("MessageCard", "Message: $message")  
    Card( // Create a card for the message 
        modifier = Modifier // Set the modifier for the card 
            .clickable { onCardClicked() } //the card is clickable 
            .padding(8.dp) // Add padding to the card 
            .fillMaxWidth() // Make the card fill the width of the screen 
    ) { 
        Column( // Create a column for the message 
            modifier = Modifier // Set the modifier for the column 
                .padding(16.dp) // Add padding to the column 
        ) { 
            Text(text = message.sender, fontWeight = FontWeight.Bold) // Show the sender of the message 
            Spacer(modifier = Modifier.height(4.dp)) // Add a spacer to add some space between the sender and the message 
            Text(text = message.message) // Show the message 
            Spacer(modifier = Modifier.height(8.dp)) // Add a spacer to add some space between the message and the media controls 
            MediaControls( // Show the media controls 
                onPlayPause = { // When the play/pause button is pressed 
                    if (mediaPlaybackManager.isPlaying()) { 
                        Log.d("MessageCard", "Pausing audio from file: ${message.audioFilePath.value}") 
                        mediaPlaybackManager.pause() 
                    } else { 
                        Log.d("MessageCard", "Playing audio from file: ${message.audioFilePath.value}") 
                        mediaPlaybackManager.playAudio(message.audioFilePath.value, context) // Call the playAudio function with the audio file path and context 
                    } 
                }, 
                onSeekForward = { /* Implement seek forward functionality in MainViewModel and pass the callback here */ }, // When the seek forward button is pressed 
                onSeekBackward = { /* Implement seek backward functionality in MainViewModel and pass the callback here */ } // When the seek backward button is pressed 
            ) 
        } 
    } 
} 
 
```MainScreen.kt``` 
 
package com.example.hello_world 
(additional import statements abridged) 
@Composable 
fun MainScreen( // Composable for the main screen. This is the main screen of the app 
    mainViewModel: MainViewModel, // The main view model 
    settingsViewModel: SettingsViewModel, // The settings view model 
    onSettingsClicked: () -> Unit, // Function to call when the settings button is pressed 
    textToSpeechServiceState: MutableState<TextToSpeechService> 
) { 
    val context = LocalContext.current // Get the current context 
    val scrollToBottomClicked = remember { mutableStateOf(false) } 
    BoxWithConstraints( // Create a box with constraints to get the maximum height of the screen 
        modifier = Modifier // Set the modifier for the box 
            .fillMaxSize() // Make the box fill the entire screen 
            .padding(16.dp) // Add padding to the box 
    ) { 
        val lazyListState = rememberLazyListState() // Create a lazy list state for the lazy column 
        val messages = mainViewModel.conversationMessages // Get the conversation messages 
        Log.d("MainScreen", "Number of messages: ${messages.size}") 
        LaunchedEffect(scrollToBottomClicked.value) { 
            if (scrollToBottomClicked.value) { 
                Log.d("MainScreen", "LaunchedEffect triggered") 
                val targetIndex = messages.size - 1 
                Log.d("MainScreen", "Target index for scrolling: $targetIndex") 
                try { 
                    lazyListState.animateScrollToItem(targetIndex) 
                    Log.d("MainScreen", "animateScrollToItem to item number $targetIndex") 
                } catch (e: Exception) { 
                    Log.e("MainScreen", "Error while animating scroll to item", e) 
                } 
                scrollToBottomClicked.value = false 
            } 
        } 
        val maxHeight = constraints.maxHeight // Get the maximum height of the screen 
        Column(modifier = Modifier.fillMaxSize()) { // Create a column for the main screen 
            LazyColumn( // Create a lazy column for the messages 
                modifier = Modifier // Set the modifier for the lazy column 
                    .weight(1f) // Make the lazy column fill the entire screen 
                    .height(((maxHeight.dp - 64.dp).coerceAtLeast(0.dp))) // Set the height of the lazy column to the maximum height of the screen minus the height of the buttons 
            ) { 
                items(messages) { message -> // For each message in the conversation messages 
                    MessageCard( 
                        message = message, 
                        onPlayAudio = { audioFilePath -> 
                            mainViewModel.mediaPlaybackManager.playAudio(audioFilePath, context) 
                        }, 
                        onCardClicked = { 
                            // Implement the functionality that should happen when the card is clicked 
                            Log.d("MainScreen", "Card with index ${messages.indexOf(message)} clicked") 
                        },mainViewModel.mediaPlaybackManager,context 
                    ) 
                } 
            } 
            Spacer(modifier = Modifier.height(16.dp)) // Add a spacer to add some space between the messages and the buttons 
            Text( // Show the listening status 
                text = if (mainViewModel.isListening) "Listening..." else "Not Listening",  // Show "Listening..." if the app is listening and "Not Listening" if the app is not listening 
                modifier = Modifier.align(Alignment.CenterHorizontally) // Align the text to the center horizontally 
            ) 
            Spacer(modifier = Modifier.height(16.dp)) // Add a spacer to add some space between the listening status and the buttons 
            Button( 
                onClick = { // When the start listening button is pressed 
                    if (textToSpeechServiceState.value is AndroidTextToSpeechService) { // If the text to speech service is the Android text to speech service 
                        textToSpeechServiceState.value = ElevenLabsTextToSpeechService("82b94d982c1018cb379c0acb629d473c", "TxGEqnHWrfWFTfGW9XjX", context)  // Set the text to speech service to the Eleven Labs text to speech service 
                    } else { // If the text to speech service is not the Android text to speech service 
                        textToSpeechServiceState.value = AndroidTextToSpeechService(context) // Set the text to speech service to the Android text to speech service 
                    } 
                }, 
                modifier = Modifier.align(Alignment.CenterHorizontally) // Align the button to the center horizontally 
            ) { 
                Text(if (textToSpeechServiceState.value is AndroidTextToSpeechService) "Use Eleven Labs TTS" else "Use Google TTS") // Show "Use Eleven Labs TTS" if the text to speech service is the Android text to speech service and "Use Google TTS" if the text to speech service is not the Android text to speech service 
            } 
            Button( // Create a button for the start listening button 
                onClick = { // When the start listening button is pressed 
                    if (mainViewModel.isListening) {  // If the app is listening 
                        Log.d("MainScreen", "Stop Listening button clicked")  // Log that the stop listening button was clicked 
                        mainViewModel.stopListening() // Stop listening 
                    } else { 
                        Log.d("MainScreen", "Start Listening button clicked") // Log that the start listening button was clicked 
                        mainViewModel.startListening() // Start listening 
                    } 
                }, 
                modifier = Modifier.align(Alignment.CenterHorizontally) // Align the button to the center horizontally 
            ) { 
                Text(if (mainViewModel.isListening) "Stop Listening" else "Start Listening")  // Show "Stop Listening" if the app is listening and "Start Listening" if the app is not listening 
            } 
            Button( // Create a button for the settings button 
                onClick = onSettingsClicked, // When the settings button is pressed 
                modifier = Modifier.align(Alignment.CenterHorizontally) // Align the button to the center horizontally 
            ) { 
                Text("Settings") // Show "Settings" 
            } 
            Button( 
                onClick = { 
                    scrollToBottomClicked.value = true 
                }, 
                modifier = Modifier.align(Alignment.CenterHorizontally) 
            ) { 
                Text("Scroll to Bottom") 
            } 
        } 
    } 
} 
 
