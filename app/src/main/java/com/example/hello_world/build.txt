 
I am an ai code copilot. I understand that you am implementing my directions, so I dont just blast you with walls of text without explanation. I first explain my approach, then I evaluate my explanation to see if it made sense, then I provide snippets with specific placement and justification.  
 
When I dont have enough information, I stop, and ask you to provide me more infomration, usually asking for code snippets, or entire files. You want to put log messages in logcat using Log.d(), and you resent it when I charge ahead cavilier without first testing that my suggestions will work by gathering evidence.  
 
We are programming for Android in Kotlin. 
 
PS. When providing larger snippets of code, I wont remove my Log.d() statements, or your comments, unless I are modifying your comments or Log.d() commands. 
 
Here is the codebase: 
 
```GoogleDriveBackupHelper.kt``` 
 
 


```codebase summary
                     


                     ```AndroidTextToSpeechService.kt
class AndroidTextToSpeechService()
fun onInit()
fun renderSpeech()
fun onStart()
fun onDone()
fun onError()
fun getAudioFilePath()
fun stop()
fun shutdown()
```

```com.example.hello_world.models.ConfigPack.kt
class com.example.hello_world.models.ConfigPack(
    val name: String,
    val systemMessage: String,
    val maxLength: Int,
    val temperature: Double,
    val frequencyPenalty: Double,
    val presencePenalty: Double,
    val model: String
)
```

```Conversation.kt
class Conversation()
```

```ConversationManager.kt
class ConversationManager(var conversation: Conversation)
fun addMessage()
fun updateMessage()
fun deleteMessage()
```

```com.example.hello_world.models.ConversationMessage.kt
class com.example.hello_world.models.ConversationMessage(
    val sender: String,
    val message: String,
    val audioFilePath: MutableState<String>
)
```

```ConversationsManager.kt
class ConversationsManager(private val conversationRepository: IConversationRepository)
fun saveConversation()
fun loadConversation()
fun deleteConversation()
fun loadAllConversations()
```

```EditSettingsScreen.kt
fun EditSettingsScreen()
```

```ElevenLabsTextToSpeechService.kt
class ElevenLabsTextToSpeechService()
fun renderSpeech()
fun onFailure()
fun onResponse()
fun getAudioFilePath()
fun createTtsRequestBody()
fun buildTtsRequest()
fun handleTtsResponse()
fun stop()
fun shutdown()
```

```HomeScreen.kt
fun HomeScreen()
```

```HomeViewModel.kt
class HomeViewModel()
```

```IConversationRepository.kt
interface IConversationRepository()
fun saveConversation()
fun loadConversation()
fun deleteConversation()
fun loadAllConversations()
```

```LocalConversationDao.kt
interface LocalConversationDao()
fun insertConversation()
fun insertMessage()
fun getConversation()
fun getMessages()
fun saveConversation()
fun getAllConversations()
fun deleteConversation()
fun deleteMessages()
```

```LocalConversationDatabase.kt
class LocalConversationDatabase()
fun conversationDao()
fun getInstance()
```

```LocalConversationEntity.kt
class LocalConversationEntity(
    @PrimaryKey
    val id: String,
    val profileJson: String,
    val createdAt: Long,
    val title: String?,
    val dateStarted: Long,
    val dateLastSaved: Long,
    val messageCount: Int
)
```

```LocalConversationMessageEntity.kt
class LocalConversationMessageEntity()
```

```LocalRoomConversationRepository.kt
class LocalRoomConversationRepository(context: Context)
fun saveConversation()
fun loadConversation()
fun deleteConversation()
fun loadAllConversations()
```

```MainActivity.kt
class MainActivity()
fun onCreate()
fun requestAudioPermission()
fun onResume()
fun onPause()
fun onDestroy()
fun onRequestPermissionsResult()
fun shareConversationText()
```

```MediaControls.kt
fun MediaControls()
```

```MediaPlaybackManager.kt
interface MediaPlaybackManager()
fun playAudio()
fun isPlaying()
fun pause()
fun seekForward()
fun seekBackward()
```

```MessageCard.kt
fun MessageCard()
```

```OpenAiApiResponse.kt
class OpenAiApiResponse(val choices: List<OpenAiApiChoice>)
class OpenAiApiChoice(val message: OpenAiApiMessage)
class OpenAiApiMessage(val role: String, val content: String)
```

```OpenAiApiService.kt
class OpenAiMessage(val role: String, val content: String)
class OpenAiApiRequest(
    val messages: List<OpenAiMessage>,
    val temperature: Double,
    val max_tokens: Int,
    val top_p: Int,
    val frequency_penalty: Double,
    val presence_penalty: Double,
    val model: String,
    val stream: Boolean
)
class OpenAiApiService(private val apiKey: String, private val settingsViewModel: SettingsViewModel, private val timeoutInSeconds: Long = 600)
fun sendMessage()
fun onFailure()
fun onResponse()
```

```SavedConversationsScreen.kt
fun SavedConversationsScreen()
fun CardElevation()
fun ConversationCard()
fun formatDate()
```

```SavedConversationsViewModel.kt
class SavedConversationsViewModel(
    private val conversationRepository: IConversationRepository
)
fun loadSavedConversations()
fun deleteConversation()
```

```SessionScreen.kt
fun SessionScreen()
```

```SessionViewModel.kt
class SessionViewModel(
    val conversationId: UUID?,
    val context: Context,
    val settingsViewModel: SettingsViewModel,
    val openAiApiService: OpenAiApiService,
    val conversationRepository: IConversationRepository,
    var textToSpeechServiceState: MutableState<TextToSpeechService>?
)
fun loadInitialConversation()
fun saveCurrentConversation()
fun startListening()
fun sendUserMessageToOpenAi()
fun updateMessage()
fun deleteMessage()
fun startPeriodicListeningCheck()
fun stopListening()
fun onTriggerWordDetected()
fun loadConversation()
fun saveConversation()
fun onSaveDialogConfirmed()
fun onSaveDialogDismissed()
```

```SettingsScreen.kt
fun SettingsScreen()
fun CurrentSettings()
```

```SettingsViewModel.kt
class SettingsViewModel()
fun updateEditedProfileName()
fun saveEditedProfile()
fun updateEditedProfileSystemMessage()
fun updateEditedProfileMaxLength()
fun updateEditedProfileTemperature()
fun updateEditedProfileFrequencyPenalty()
fun updateEditedProfilePresencePenalty()
fun updateEditedProfileModel()
fun saveCustomProfile()
fun deleteProfile()
fun applyProfile()
```

```TextToSpeechService.kt
interface TextToSpeechService()
fun renderSpeech()
fun stop()
fun getAudioFilePath()
fun shutdown()
```

```VoiceTriggerDetector.kt
class VoiceTriggerDetector()
fun startListening()
fun stopListening()
fun onReadyForSpeech()
fun onBeginningOfSpeech()
fun onRmsChanged()
fun onBufferReceived()
fun onEndOfSpeech()
fun onError()
fun onResults()
fun onPartialResults()
fun onEvent()
fun processResults()
```

```AndroidMediaPlaybackManager.kt
class AndroidMediaPlaybackManager()
fun seekForward()
fun seekBackward()
fun pause()
fun isPlaying()
fun playAudio()
fun start()
fun pause()
fun getDuration()
fun getCurrentPosition()
fun getBufferPercentage()
fun isPlaying()
fun seekTo()
fun canPause()
fun getAudioSessionId()
fun canSeekBackward()
fun canSeekForward()
```

```Color.kt

```

```Theme.kt
fun HelloworldTheme()
```

```Type.kt

```

```UmlGenerator.kt
class diagram()
fun mains()
fun generateUml()
```


    


    ```end of codebase summary

    This is the abridged structure of the all the files. If I need the full content of any one of these files beyond those that I've provided here, I will tell you so that you can get those files for me before I begin my work. What follows is an outline summary of all the files, for me to review so that I can identify what else I need, if anything. I'll let you know my assesment of the suficiency of this information right off the bat: 
 
 
