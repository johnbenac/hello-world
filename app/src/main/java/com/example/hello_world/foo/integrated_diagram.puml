@startuml
package com.example.hello_world {
    class ConversationManager {
        + conversation: Conversation
    }
}
package com.example.hello_world {
    class ConversationsManager {
        private conversationRepository: IConversationRepository
        suspend loadConversation(conversationId: UUID): Conversation
        suspend loadAllConversations(): List<Conversation>
    }
}
package com.example.hello_world {
    class MainActivity {
        <<ExperimentalMaterial3Api>>
        private textToSpeechService: TextToSpeechService?
        lateinit voiceTriggerDetector: VoiceTriggerDetector
        lateinit openAiApiService: OpenAiApiService
        lateinit sessionViewModel: SessionViewModel
    }
}
package data.local.dao {
    class LocalConversationDao {
        <<Interface>>
        <<Dao>>
        <<Insert>>
        <<Insert>>
        <<Query>>
        <<Query>>
        <<Transaction>>
        <<Query>>
        <<Query>>
        <<Query>>
        suspend getConversation(conversationId: String): LocalConversationEntity
        suspend getMessages(conversationId: String): List<LocalConversationMessageEntity>
        suspend getAllConversations(): List<LocalConversationEntity>
    }
}
package data.local.database {
    class LocalConversationDatabase {
        <<Database>>
        <<Volatile>>
        private INSTANCE: LocalConversationDatabase?
        abstract conversationDao(): LocalConversationDao
        + getInstance(context: Context): LocalConversationDatabase
        private INSTANCE: LocalConversationDatabase?
        + context: Context(: LocalConversationDatabase): Unit
    }
}
package data.local.entities {
    class LocalConversationEntity {
        <<Data Class>>
        <<Entity>>
        <<PrimaryKey>>
        + id: String
        + profileJson: String
        + createdAt: Long
        + title: String?
        + dateStarted: Long
        + dateLastSaved: Long
        + messageCount: Int
    }
}
package data.local.entities {
    class LocalConversationMessageEntity {
        <<Data Class>>
        <<Entity>>
        <<PrimaryKey>>
        + id: Int
        + conversationId: String
        + sender: String
        + message: String
        + audioFilePath: String
    }
}
package hello_world.data.repository {
    class IConversationRepository {
        <<Interface>>
        suspend loadConversation(conversationId: UUID): Conversation
        suspend loadAllConversations(): List<Conversation>
    }
}
package hello_world.data.repository {
    class LocalRoomConversationRepository {
        suspend loadConversation(conversationId: UUID): Conversation
        suspend loadAllConversations(): List<Conversation>
    }
}
package example.hello_world.models {
    class ConfigPack {
        <<Data Class>>
        + name: String
        + systemMessage: String
        + maxLength: Int
        + temperature: Double
        + frequencyPenalty: Double
        + presencePenalty: Double
        + model: String
    }
}
package example.hello_world.models {
    class Conversation {
        <<Data Class>>
        + id: UUID
        + messages: MutableList<ConversationMessage>
        + configPack: ConfigPack
        + createdAt: Long
        + title: String
        + dateStarted: Long
        + dateLastSaved: Long
        + messageCount: Int
    }
}
package example.hello_world.models {
    class ConversationMessage {
        <<Data Class>>
        + sender: String
        + message: String
        + audioFilePath: MutableState<String>
    }
}
package example.hello_world.models {
    class OpenAiApiResponse {
        <<Data Class>>
        + choices: List<OpenAiApiChoice>
        + message: OpenAiApiMessage
        + role: String
        + content: String
    }
}
package hello_world.services.AI_Predictive {
    class OpenAiMessage {
        <<Data Class>>
        + role: String
        + content: String
        + messages: List<OpenAiMessage>
        + temperature: Double
        + max_tokens: Int
        + top_p: Int
        + frequency_penalty: Double
        + presence_penalty: Double
        + model: String
        + stream: Boolean
        private apiKey: String
        private settingsViewModel: SettingsViewModel
        private timeoutInSeconds: Long
        suspend sendMessage(conversationHistory: List<ConversationMessage>): String
    }
}
package hello_world.services.media_playback {
    class AndroidMediaPlaybackManager {
        + mediaPlayer: MediaPlayer?
        private mediaController: MediaController?
        private currentFilePath: String?
        private playbackPosition: Int
        override isPlaying(): Boolean
        override getDuration(): Int
        override getCurrentPosition(): Int
        override getBufferPercentage(): Int
        override isPlaying(): Boolean
        override canPause(): Boolean
        override getAudioSessionId(): Int
        override canSeekBackward(): Boolean
        override canSeekForward(): Boolean
    }
}
package hello_world.services.media_playback {
    class MediaPlaybackManager {
        <<Interface>>
        + isPlaying(): Boolean
    }
}
package hello_world.services.speech_to_text {
    class VoiceTriggerDetector {
        private context: Context
        private triggerWord: String
        private mainHandler: Handler
        private latestPartialResult: MutableState<String?>
        private speechRecognizer: SpeechRecognizer
        private keepListening: Boolean
    }
}
package hello_world.services.text_to_speech {
    class AndroidTextToSpeechService {
        private context: Context
        override mediaPlaybackManager: MediaPlaybackManager
        private lastGeneratedAudioFilePath: String?
        private textToSpeech: TextToSpeech
        override renderSpeech(text: String, onFinish: (() -> Unit)?, onStart: (() -> Unit)?, audioFilePathState: MutableState<String>): String
        override getAudioFilePath(): String
    }
}
package hello_world.services.text_to_speech {
    class ElevenLabsTextToSpeechService {
        private apiKey: String
        private voiceId: String
        private context: Context
        override mediaPlaybackManager: MediaPlaybackManager
        private lastGeneratedAudioFilePath: String?
        override renderSpeech(text: String, onFinish: (() -> Unit)?, onStart: (() -> Unit)?, audioFilePathState: MutableState<String>): String
        override getAudioFilePath(): String
        private createTtsRequestBody(text: String): RequestBody
        private buildTtsRequest(requestBody: RequestBody): Request
    }
}
package hello_world.services.text_to_speech {
    class TextToSpeechService {
        <<Interface>>
        + mediaPlaybackManager: MediaPlaybackManager
        + renderSpeech(text: String, onFinish: (() -> Unit)?, onStart: (() -> Unit)?, audioFilePathState: MutableState<String>): String
        + getAudioFilePath(): String
    }
}
package ui.home.viewmodel {
    class HomeViewModel {
    }
}
package ui.saved_conversations.viewmodel {
    class SavedConversationsViewModel {
        private conversationRepository: IConversationRepository
        + savedConversations: StateFlow<List<Conversation>>
        suspend loadSavedConversations(): List<Conversation>
    }
}
package ui.session.viewmodel {
    class SessionViewModel {
        + conversationId: UUID?
        + context: Context
        + settingsViewModel: SettingsViewModel
        + openAiApiService: OpenAiApiService
        + conversationRepository: IConversationRepository
        + textToSpeechServiceState: MutableState<TextToSpeechService>?
        + mediaPlaybackManager: MediaPlaybackManager
        + isAppSpeaking: Boolean
        + isListening: Boolean
    }
}
package ui.settings.viewmodel {
    class SettingsViewModel {
    }
}
package example.hello_world.utils {
    class diagram {
        <<ExperimentalMaterial3Api>>
        <<Composable>>
        <<ExperimentalMaterial3Api>>
        <<Composable>>
    }
}
ConversationManager --> Conversation : association
ConversationsManager --> IConversationRepository : association
ConversationsManager --> Conversation : dependency
ConversationsManager --> Conversation : realization
MainActivity --> AppCompatActivity : inheritance
MainActivity --> AppCompatActivity : interface
MainActivity --> VoiceTriggerDetector : association
MainActivity --> SessionViewModel : association
LocalConversationDao --> LocalConversationEntity : dependency
LocalConversationDao --> LocalConversationEntity : realization
LocalConversationDatabase --> RoomDatabase : inheritance
LocalConversationDatabase --> RoomDatabase : interface
LocalConversationDatabase --> LocalConversationDao : dependency
LocalConversationDatabase --> LocalConversationDao : realization
LocalConversationDatabase --> LocalConversationDatabase : dependency
LocalConversationDatabase --> LocalConversationDatabase : realization
IConversationRepository --> Conversation : dependency
IConversationRepository --> Conversation : realization
LocalRoomConversationRepository --> Conversation : dependency
LocalRoomConversationRepository --> Conversation : realization
Conversation --> ConfigPack : association
OpenAiMessage --> SettingsViewModel : association
AndroidMediaPlaybackManager --> MediaPlaybackManager : inheritance
AndroidMediaPlaybackManager --> MediaPlaybackManager : interface
AndroidTextToSpeechService --> MediaPlaybackManager : association
ElevenLabsTextToSpeechService --> MediaPlaybackManager : association
TextToSpeechService --> MediaPlaybackManager : association
HomeViewModel --> ViewModel : inheritance
HomeViewModel --> ViewModel : interface
SavedConversationsViewModel --> IConversationRepository : association
SessionViewModel --> SettingsViewModel : association
SessionViewModel --> IConversationRepository : association
SessionViewModel --> MediaPlaybackManager : association
SettingsViewModel --> ViewModel : inheritance
SettingsViewModel --> ViewModel : interface
@enduml
