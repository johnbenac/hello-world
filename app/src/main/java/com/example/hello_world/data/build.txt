this is the codebase: 
 
```LocalConfigPackDao.kt    
 
package com.example.hello_world.data.local.configpack.dao


@Dao
interface LocalConfigPackDao {
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertConfigPack(configPack: LocalConfigPackEntity)

    @Query("SELECT * FROM config_packs")
    suspend fun getAllConfigPacks(): List<LocalConfigPackEntity>

    @Query("DELETE FROM config_packs WHERE id = :configPackId")
    suspend fun deleteConfigPack(configPackId: String)
 
``` 
 
 
```LocalConfigPackEntity.kt    
 
package com.example.hello_world.data.local.configpack.entities



@Entity(tableName = "config_packs")
data class LocalConfigPackEntity(
    @PrimaryKey
    val id: String,
    val name: String,
    val systemMessage: String,
    val maxLength: Int,
    val temperature: Double,
    val frequencyPenalty: Double,
    val presencePenalty: Double,
    val model: String
 
``` 
 
 
```LocalConversationDao.kt    
 
package com.example.hello_world.data.local.conversation.dao


@Dao
interface LocalConversationDao {
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertConversation(conversation: LocalConversationEntity)

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertMessage(message: LocalConversationMessageEntity)

    @Query("SELECT * FROM conversations WHERE id = :conversationId")
    suspend fun getConversation(conversationId: String): LocalConversationEntity?

    @Query("SELECT * FROM conversation_messages WHERE conversationId = :conversationId")
    suspend fun getMessages(conversationId: String): List<LocalConversationMessageEntity>

    @Transaction
    suspend fun saveConversation(conversation: LocalConversationEntity, messages: List<LocalConversationMessageEntity>) {
        insertConversation(conversation)
        messages.forEach { insertMessage(it) }
    }

    @Query("SELECT * FROM conversations")
    suspend fun getAllConversations(): List<LocalConversationEntity>

    @Query("DELETE FROM conversations WHERE id = :conversationId")
    suspend fun deleteConversation(conversationId: String)

    @Query("DELETE FROM conversation_messages WHERE conversationId = :conversationId")
    suspend fun deleteMessages(conversationId: String)
 
``` 
 
 
```LocalConversationDatabase.kt    
 
package com.example.hello_world.data.local.conversation.database



@Database(
    entities = [LocalConversationEntity::class, LocalConversationMessageEntity::class, LocalConfigPackEntity::class],
    version = 3,
    exportSchema = false
)
abstract class LocalConversationDatabase : RoomDatabase() {
    abstract fun conversationDao(): LocalConversationDao
    abstract fun configPackDao(): LocalConfigPackDao

    companion object {
        @Volatile
        private var INSTANCE: LocalConversationDatabase? = null

        fun getInstance(context: Context): LocalConversationDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    LocalConversationDatabase::class.java,
                    "conversation_database"
                ).build()
                INSTANCE = instance
                instance
            }
        }
    }
 
``` 
 
 
```LocalConversationEntity.kt    
 
package com.example.hello_world.data.local.conversation.entities


@Entity(tableName = "conversations")
data class LocalConversationEntity(
    @PrimaryKey
    val id: String,
    val profileJson: String,
    val createdAt: Long,
    val title: String?,
    val dateStarted: Long,
    val dateLastSaved: Long,
    val messageCount: Int
 
``` 
 
 
```LocalConversationMessageEntity.kt    
 
package com.example.hello_world.data.local.conversation.entities


@Entity(
    tableName = "conversation_messages",
    foreignKeys = [
        ForeignKey(
            entity = LocalConversationEntity::class,
            parentColumns = ["id"],
            childColumns = ["conversationId"],
            onDelete = ForeignKey.CASCADE
        )
    ]
)
data class LocalConversationMessageEntity(
    @PrimaryKey(autoGenerate = true)
    val id: Int = 0,
    val conversationId: String,
    val sender: String,
    val message: String,
    val audioFilePath: String
 
``` 
 
 
```ConfigPackRepository.kt    
 
package com.example.hello_world.data.repository


interface ConfigPackRepository {
    fun addConfigPack(configPack: ConfigPack)
    fun removeConfigPack(configPack: ConfigPack)
    fun getAllConfigPacks(): List<ConfigPack>
    fun findConfigPackByName(name: String): ConfigPack?
}


class DefaultConfigPackRepository : ConfigPackRepository {
    private val configPacks = mutableListOf<ConfigPack>()

    init {
        // Add default ConfigPacks here
        configPacks.add(ConfigPack(UUID.randomUUID(),"GPT3.5", "I am an AI assistant named Jake.", 1000, 0.9, 0.0, 0.1, "gpt-3.5-turbo"))
        configPacks.add(ConfigPack(UUID.randomUUID(),"GPT4", "I am here to help you today. What do you need?", 1500, 0.8, 0.1, 0.2, "gpt-4"))
    }

    override fun addConfigPack(configPack: ConfigPack) {
        configPacks.add(configPack)
    }

    override fun removeConfigPack(configPack: ConfigPack) {
        configPacks.remove(configPack)
    }

    override fun getAllConfigPacks(): List<ConfigPack> {
        return configPacks.toList()
    }

    override fun findConfigPackByName(name: String): ConfigPack? {
        return configPacks.firstOrNull { it.name == name }
    }
 
``` 
 
 
```IConfigPackRepository.kt    
 
package com.example.hello_world.data.repository


interface IConfigPackRepository {
    suspend fun addConfigPack(configPack: ConfigPack)
    suspend fun removeConfigPack(configPack: ConfigPack)
    suspend fun getAllConfigPacks(): List<ConfigPack>
 
``` 
 
 
```IConversationRepository.kt    
 
package com.example.hello_world.data.repository


interface IConversationRepository {
    suspend fun saveConversation(conversation: Conversation)
    suspend fun loadConversation(conversationId: UUID): Conversation?
    suspend fun deleteConversation(conversationId: UUID)
    suspend fun loadAllConversations(): List<Conversation>
}

 
``` 
 
 
```LocalRoomConfigPackRepository.kt    
 
package com.example.hello_world.data.repository



class LocalRoomConfigPackRepository(context: Context) : IConfigPackRepository {
    private val configPackDao = LocalConversationDatabase.getInstance(context).configPackDao()
    private val moshi = Moshi.Builder().add(KotlinJsonAdapterFactory()).build()

    override suspend fun addConfigPack(configPack: ConfigPack) {
        val localConfigPack = LocalConfigPackEntity(
            id = configPack.id.toString(),
            name = configPack.name,
            systemMessage = configPack.systemMessage,
            maxLength = configPack.maxLength,
            temperature = configPack.temperature,
            frequencyPenalty = configPack.frequencyPenalty,
            presencePenalty = configPack.presencePenalty,
            model = configPack.model
        )
        configPackDao.insertConfigPack(localConfigPack)
    }

    override suspend fun removeConfigPack(configPack: ConfigPack) {
        configPackDao.deleteConfigPack(configPack.id.toString())
    }

    override suspend fun getAllConfigPacks(): List<ConfigPack> {
        val localConfigPacks = configPackDao.getAllConfigPacks()
        return localConfigPacks.map { localConfigPack ->
            ConfigPack(
                id = UUID.fromString(localConfigPack.id),
                name = localConfigPack.name,
                systemMessage = localConfigPack.systemMessage,
                maxLength = localConfigPack.maxLength,
                temperature = localConfigPack.temperature,
                frequencyPenalty = localConfigPack.frequencyPenalty,
                presencePenalty = localConfigPack.presencePenalty,
                model = localConfigPack.model
            )
        }
    }

//    override suspend fun findConfigPackByName(name: String): ConfigPack? {
//        // TODO: Implement finding a configPack by name in the database
//    }
 
``` 
 
 
```LocalRoomConversationRepository.kt    
 
package com.example.hello_world.data.repository






class LocalRoomConversationRepository(context: Context) : IConversationRepository {
    private val conversationDao = LocalConversationDatabase.getInstance(context).conversationDao()
    private val moshi = Moshi.Builder()
        .add(UUIDJsonAdapter())
        .add(KotlinJsonAdapterFactory())
        .build()
    override suspend fun saveConversation(conversation: Conversation) {
        Log.d("LocalRoomRepo", "Saving conversation with ID: ${conversation.id}")
        val configPackJson = moshi.adapter(ConfigPack::class.java).toJson(conversation.configPack)
        withContext(Dispatchers.IO) {
            val conversationEntity = LocalConversationEntity(
                id = conversation.id.toString(),
                profileJson = configPackJson,
                createdAt = conversation.createdAt,
                title = conversation.title,
                dateStarted = conversation.dateStarted,
                dateLastSaved = conversation.dateLastSaved,
                messageCount = conversation.messages.size
            )
            val messageEntities = conversation.messages.map { message ->
                LocalConversationMessageEntity(
                    conversationId = conversation.id.toString(),
                    sender = message.sender,
                    message = message.message,
                    audioFilePath = message.audioFilePath.value
                )
            }
            conversationDao.saveConversation(conversationEntity, messageEntities)
        }
    }

    override suspend fun loadConversation(conversationId: UUID): Conversation? {
        Log.d("LocalRoomRepo", "Loading conversation with ID: $conversationId")
        return withContext(Dispatchers.IO) {
            val conversationEntity = conversationDao.getConversation(conversationId.toString())
            val messageEntities = conversationDao.getMessages(conversationId.toString())
            val configPack = moshi.adapter(ConfigPack::class.java).fromJson(conversationEntity?.profileJson)
            if (conversationEntity != null && configPack != null) {
                val configPack = moshi.adapter(ConfigPack::class.java).fromJson(conversationEntity.profileJson)
                configPack?.let {
                    val messages = messageEntities.map { entity ->
                        ConversationMessage(
                            sender = entity.sender,
                            message = entity.message,
                            audioFilePath = mutableStateOf(entity.audioFilePath)
                        )
                    }.toMutableList()

                    Conversation(
                        id = UUID.fromString(conversationEntity.id),
                        messages = messages,
                        configPack = it,
                        createdAt = conversationEntity.createdAt,
                        title = conversationEntity.title.orEmpty(),
                        dateStarted = conversationEntity.dateStarted,
                        dateLastSaved = conversationEntity.dateLastSaved,
                        messageCount = conversationEntity.messageCount
                    )
                }
            } else {
                null
            }
        }
    }

    override suspend fun deleteConversation(conversationId: UUID) {
        Log.d("LocalRoomRepo", "Deleting conversation with ID: $conversationId")
        withContext(Dispatchers.IO) {
            conversationDao.deleteMessages(conversationId.toString())
            conversationDao.deleteConversation(conversationId.toString())
        }
    }

    override suspend fun loadAllConversations(): List<Conversation> {
        return withContext(Dispatchers.IO) {
            val conversationEntities = conversationDao.getAllConversations()
            conversationEntities.map { entity ->
                val configPack = moshi.adapter(ConfigPack::class.java).fromJson(entity.profileJson)
                configPack?.let {
                    Conversation(
                        id = UUID.fromString(entity.id),
                        messages = mutableListOf(), // We don't need messages for the saved conversations list
                        configPack = it,
                        createdAt = entity.createdAt,
                        title = entity.title.orEmpty(),
                        dateStarted = entity.dateStarted,
                        dateLastSaved = entity.dateLastSaved,
                        messageCount = entity.messageCount
                    )
                }
            }.filterNotNull()
        }
    }
}

class UUIDJsonAdapter {
    @ToJson
    fun toJson(uuid: UUID): String {
        return uuid.toString()
    }

    @FromJson
    fun fromJson(uuidString: String): UUID {
        return UUID.fromString(uuidString)
    }
 
``` 
 
